{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\manca\\\\Documents\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(formProps) {\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, formProps.label), React.createElement(\"input\", Object.assign({}, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          textColor: red\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, formProps.meta.error));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      alert(\"nanana\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component); // called when the form is initally rendered or useri nteracts with it\n\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // the user did not enter a title\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    // the user did not enter a title\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate // MANDATORY to let the validate function to run when it should\n\n})(StreamCreate);","map":{"version":3,"sources":["C:\\Users\\manca\\Documents\\React\\streams\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","formProps","label","input","textColor","red","meta","error","formValues","alert","props","handleSubmit","onSubmit","renderInput","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;gCAEOC,S,EAAW;AACtB,aACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQA,SAAS,CAACC,KAAlB,CADD,EAEC,+CAAWD,SAAS,CAACE,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFD,EAGC;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAEC;AAAZ,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BJ,SAAS,CAACK,IAAV,CAAeC,KAA9C,CAHD,CADD;AAOA;;;6BAGQC,U,EAAY;AACpBC,MAAAA,KAAK,CAAC,QAAD,CAAL;AACA;;;6BAGQ;AACR,aACC;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,EAGC;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHD,CADD;AAOA;;;;EA1ByBhB,KAAK,CAACiB,S,GA8BjC;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACP,UAAD,EAAgB;AAChC,MAAMQ,MAAM,GAAG,EAAf;;AAEA,MAAG,CAACR,UAAU,CAACS,KAAf,EAAsB;AACrB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACA;;AAED,MAAG,CAACT,UAAU,CAACU,WAAf,EAA4B;AAC3B;AACAF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACA;;AAED,SAAOF,MAAP;AACA,CAdD;;AAiBA,eAAejB,SAAS,CAAC;AACxBoB,EAAAA,IAAI,EAAE,cADkB;AAExBJ,EAAAA,QAAQ,EAAEA,QAFc,CAEL;;AAFK,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nclass StreamCreate extends React.Component {\r\n\r\n\trenderInput(formProps) {\r\n\t\treturn(\r\n\t\t\t<div className=\"field\">\r\n\t\t\t\t<label>{formProps.label}</label>\r\n\t\t\t\t<input {...formProps.input} />\r\n\t\t\t\t<div style={{textColor: red}}>{formProps.meta.error}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tonSubmit(formValues) {\r\n\t\talert(\"nanana\");\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n\t\t\t\t<Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\r\n\t\t\t\t<Field name=\"description\" component={this.renderInput} label=\"Enter description\" />\r\n\t\t\t\t<button className=\"ui button primary\">Submit</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n// called when the form is initally rendered or useri nteracts with it\r\nconst validate = (formValues) => {\r\n\tconst errors = {};\r\n\r\n\tif(!formValues.title) {\r\n\t\t// the user did not enter a title\r\n\t\terrors.title = 'You must enter a title';\r\n\t}\r\n\r\n\tif(!formValues.description) {\r\n\t\t// the user did not enter a title\r\n\t\terrors.description = 'You must enter a description';\r\n\t}\r\n\r\n\treturn errors;\r\n};\r\n\r\n\r\nexport default reduxForm({\r\n\tform: 'streamCreate',\r\n\tvalidate: validate // MANDATORY to let the validate function to run when it should\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}